version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: siak_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      # Pass through DB config
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      # CDC settings
      POSTGRES_INITDB_ARGS: "--data-checksums"
    command: [
      "postgres", 
      "-c", "wal_level=logical",
      "-c", "max_replication_slots=5",
      "-c", "max_wal_senders=10"
    ]
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data_sources/init_siak:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - siak_network
  
  postgres-warehouse:
    image: postgres:15
    container_name: warehouse_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${WAREHOUSE_DB_USER}
      POSTGRES_PASSWORD: ${WAREHOUSE_DB_PASSWORD}
      POSTGRES_DB: ${WAREHOUSE_DB_NAME}
    ports:
      - "${WAREHOUSE_DB_PORT}:5432"
    volumes:
      - warehouse_data:/var/lib/postgresql/data
      - ./data_sources/init_warehouse:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${WAREHOUSE_DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - siak_network

  minio:
    image: minio/minio:latest
    container_name: siak_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      # Pass through all MinIO config
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_SECURE: ${MINIO_SECURE}
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_PORT}:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - siak_network

  # Create required buckets in MinIO
  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    environment:
      MINIO_USER: ${MINIO_ROOT_USER}
      MINIO_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SECURE: ${MINIO_SECURE}
    entrypoint: >
      /bin/sh -c "
      # Use secure or insecure connection based on environment variable
      if [ "$${MINIO_SECURE}" = "True" ]; then
        PROTOCOL='https'
      else
        PROTOCOL='http'
      fi;
      /usr/bin/mc config host add myminio $${PROTOCOL}://minio:${MINIO_PORT} $${MINIO_USER} $${MINIO_PASSWORD};
      /usr/bin/mc mb myminio/raw;
      /usr/bin/mc mb myminio/processed;
      /usr/bin/mc mb myminio/checkpoints;
      exit 0;
      "
    networks:
      - siak_network
  
  # Airflow PostgreSQL database
  postgres-airflow:
    image: postgres:15
    container_name: airflow_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - siak_network

  # Airflow webserver and scheduler in a single container
  airflow:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: siak_airflow
    depends_on:
      postgres-airflow:
        condition: service_healthy
      minio:
        condition: service_started
      postgres:
        condition: service_healthy
      postgres-warehouse:
        condition: service_healthy
    env_file:
      - ./.env
    mem_limit: 4g
    environment:
      - AIRFLOW__WEBSERVER__WEB_SERVER_HOST=0.0.0.0
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__WEBSERVER__BASE_URL=http://localhost:${AIRFLOW_WEBSERVER_WEB_SERVER_PORT}
      - ATTENDANCE_CSV_PATH=/opt/airflow/data/attendance.csv
    volumes:
      - ${AIRFLOW_DAGS_FOLDER}:/opt/airflow/dags
      - ${AIRFLOW_LOGS_FOLDER}:/opt/airflow/logs
      - ${AIRFLOW_PLUGINS_FOLDER}:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
      - ./generator:/opt/airflow/generator
      - ./data_sources:/opt/airflow/data_sources
    ports:
      - "${AIRFLOW_WEBSERVER_WEB_SERVER_PORT}:8080"  # Airflow UI
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    command: >
      bash -c "airflow db init && 
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com && 
      airflow scheduler & airflow webserver"
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $${HOSTNAME}"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - siak_network
  
  superset:
    build:
      context: .
      dockerfile: Dockerfile.superset
    container_name: superset
    ports:
      - "8088:8088"
    environment:
      - SUPERSET_SECRET_KEY=my_secret_key
    depends_on:
      - postgres-warehouse
    volumes:
      - superset_home:/app/superset_home
    networks:
    - siak_network 


volumes:
  postgres_data:
  warehouse_data:
  minio_data:
  airflow_postgres_data:
  superset_home:

networks:
  siak_network:
    driver: bridge
